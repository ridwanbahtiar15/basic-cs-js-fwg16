create table categorys (
	id serial,
	categorys_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_categorys primary key(id)
);

insert into categorys (categorys_name) values ('Coffee'), ('Non Coffee');

select * from products;

create table products (
	id serial,
	products_name varchar(100) not null,
	price int not null,
	categorys_id int not null,
	promos_id int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint fk_products_categorys foreign key (categorys_id) references categorys(id),
	constraint fk_products_promos foreign key (promos_id) references promos(id)
);

insert into products (products_name, price, categorys_id, promos_id) values ('Cappucino', 25000, 1, 1), ('Moccacino', 22000, 1, 1), ('Lemon Water', 20000, 2, 2);

select p.id, p.products_name, p.price, c.categorys_name, pr.promos_name from products p
join categorys c on p.categorys_id = c.id
join promos pr on p.promos_id = pr.id;

create table promos (
	id serial,
	promos_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_promos primary key(id)
);


insert into promos (promos_name) values ('FAZZFOOD50'), ('DITRAKTIR60');

select * from users;

alter table product add column promo_id int not null default 0;

create table users (
	id serial,
	users_name varchar(100) not null,
	users_password int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_user primary key(id)
);

insert into users (users_name, users_password) values ('ridwan', '12345'), ('bagus', '12345');

create table orders (
	id serial,
	users_id int not null,
	products_id int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint fk_orders_users foreign key (users_id) references users(id),
	constraint fk_orders_products foreign key (products_id) references products(id)
);

alter table products add constraint pk_prducts primary key(id);

insert into orders (users_id, products_id) values ('1', '1'), ('1', '2'), ('2', '3');

select * from orders;

select o.id, p.products_name, p.price, c.categorys_name, pr.promos_name from products p
join categorys c on p.categorys_id = c.id
join promos pr on p.promos_id = pr.id;


--crud category
select * from categorys;
insert into categorys (categorys_name) values ('Milk');
update categorys set categorys_name = 'Coffees' where id = 1;
delete from categorys where id = 3;

--crud poromo
select * from promos;
insert into promos (promos_name) values ('FLASHSALE');
update promos set promos_name = 'FLASHSALE50' where id = 3;
delete from promos where id = 3;

--crud user
select * from users;
insert into users (users_name, users_password) values ('bagas', 54321);
update users set users_name = 'faqih' where id = 4;
delete from users where id = 4;

--crud product
select * from products;
insert into products (products_name, price, categorys_id, promos_id) values ('Strawberry Cream', 20000, 2, 2);
update products set products_name = 'Strawberry Cream' where id = 4;
delete from products where id = 4;

--crud order
select * from orders;
insert into orders (users_id, products_id) values (2, 2);
update orders set products_id = 3 where id = 4;
delete from orders where id = 4;


--query product berdasarkan nama
select * from products where products_name = 'Cappucinos';
update products set products_name = 'Cappucinos' where id = 1;
delete from products where products_name = 'Strawberry Milk';

--query product berdasarkan nama, kategori, promo dan harga

--dengan join
select p.id, p.products_name, p.price, c.categorys_name, pr.promos_name from products p
join categorys c on p.categorys_id = c.id
join promos pr on p.promos_id = pr.id;


--menampilkan data hanya 3
--pageinput 1
--select * from products order by id asc limit 3 offset 6;
-- pagination
create or replace function pagination1(page_input int) returns setof products as $$
	select * from products order by id asc limit 3 offset page_input * 3 - 3;
$$ language sql;

select pagination1(3);