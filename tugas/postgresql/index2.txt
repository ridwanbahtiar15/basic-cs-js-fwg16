create table categorys (
	categorys_id serial,
	categorys_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_categorys primary key(categorys_id)
);
--
insert into categorys (categorys_name) values ('Coffee'), ('Non Coffee'), ('Milk');

select * from categorys c ;

create table products (
	products_id serial,
	products_name varchar(100) not null,
	products_price int not null,
	products_desc text not null,
	products_stock int not null,
	products_image varchar(100) not null,
	categorys_id int not null,
	promos_id int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint fk_products_categorys foreign key (categorys_id) references categorys(categorys_id),
	constraint fk_products_promos foreign key (promos_id) references promos(promos_id)
);

insert into products (products_name, products_price, products_desc ,products_stock, products_image, categorys_id, promos_id)
values 
('Caramel Machiato', 40000, 'Cold brewing is method of brewing that ...', 200, 'caramel-machiato.jpg', 1, 1),
('Hazelnut Latte', 40000, 'Cold brewing is method of brewing that ...', 200, 'hazelnut-latte.jpg', 1, 1),
('Kopi Susu', 40000, 'Cold brewing is method of brewing that ...', 200, 'kopi-susu.jpg', 1, 2),
('Expresso Supreme', 40000, 'Cold brewing is method of brewing that ...', 200, 'expresso-supreme.jpg', 1, 3),
('Caramel Valvet Latte', 40000, 'Cold brewing is method of brewing that ...', 200, 'caramel-valvet-latte.jpg', 1, 2),
('Lemon Water', 25000, 'Cold brewing is method of brewing that ...', 160, 'lemon-water.jpg', 2, 1),
('Strawberry Milk', 36000, 'Cold brewing is method of brewing that ...', 120, 'strawberry-milk.jpg', 3, 3);

select * from products;

--select p.id, p.products_name, p.price, c.categorys_name, pr.promos_name from products p
--join categorys c on p.categorys_id = c.id
--join promos pr on p.promos_id = pr.id;

create table promos (
	promos_id serial,
	promos_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_promos primary key(promos_id)
);
--
--
insert into promos (promos_name) values ('FLASHSALE'), ('FAZZFOOD50'), ('DITRAKTIR60');

select * from promos;

create table deliverys (
	deliverys_id serial,
	deliverys_name varchar(100) not null,
	deliverys_cost int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_deliverys primary key(deliverys_id)
);

insert into deliverys (deliverys_name, deliverys_cost) values ('Dine In', 0), ('Door Delivery', 2000), ('Pickup', 5000);

select * from deliverys;

create table sizes (
	sizes_id serial,
	sizes_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_sizes primary key(sizes_id)
);

insert into sizes (sizes_name) values ('R'), ('L'), ('XL'), ('250gr'), ('500gr');

select * from sizes;

create table products_deliverys (
	products_deliverys_id serial,
	products_id int not null,
	deliverys_id int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_products_deliverys primary key(products_deliverys_id),
	constraint fk_products_deliverys_products foreign key (products_id) references products(products_id),
	constraint fk_products_deliverys_deliverys foreign key (deliverys_id) references deliverys(deliverys_id)
);

insert into products_deliverys (products_id, deliverys_id) values 
(1, 1), (1, 2), (2, 1), (2, 2), (3, 2), (4, 1), (5, 1), (5, 2), (6, 1), (7, 2);

select * from products_deliverys;

create table products_sizes (
	products_sizes_id serial,
	products_id int not null,
	sizes_id int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_products_sizes primary key(products_sizes_id),
	constraint fk_products_sizes_products foreign key (products_id) references products(products_id),
	constraint fk_products_sizes_sizes foreign key (sizes_id) references sizes(sizes_id)
);

insert into products_sizes (products_id, sizes_id) values 
(1, 1), (1, 2), (1, 3), (1, 4), (1, 5),
(2, 1), (2, 2), (2, 3), (2, 4), (2, 5),
(3, 1), (3, 2), (3, 3), (3, 4), (3, 5),
(4, 1), (4, 2), (4, 3), (4, 4), (4, 5),
(5, 1), (5, 2), (5, 3), (5, 4), (5, 5),
(6, 1), (6, 2), (6, 3),
(7, 1), (7, 2), (7, 3);

select * from products_sizes;

create table roles (
	roles_id serial,
	roles_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_roles primary key(roles_id)
);

insert into roles (roles_name) values ('Admin'), ('Normal User');

select * from roles;

create table users (
	users_id serial,
	users_name varchar(100) not null,
	users_email varchar(100) not null,
	users_password varchar(100) not null,
	users_phone varchar(15) not null,
	users_address text not null,
	users_image varchar(100) not null,
	roles_id int8 not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_users primary key(users_id),
	constraint fk_users_roles foreign key (roles_id) references roles(roles_id)
);

insert into users (users_name, users_email, users_password, users_phone, users_address, users_image, roles_id)
values 
('Ridwan Bahtiar', 'ridwanbahtiar@gmail.com', '12345', '08128348343', 'Kota Bekasi', 'ridwan-bahtiar.jpg', 1),
('Eleanor Pena', 'eleanor@gmail.com', '12345', '0852387232', 'Jakarta', 'eleanor.jpg', 2);

create table customers (
	customers_id serial,
	customers_name varchar(100) not null,
	customers_email varchar(100) not null,
	customers_password varchar(100) not null,
	customers_phone varchar(15) not null,
	customers_address text not null,
	customers_image varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_customers primary key(customers_id)
);

insert into customers (customers_name, customers_email, customers_password, customers_phone, customers_address, customers_image)
values 
('Muhammad Bagas', 'bagas@gmail.com', '12345', '08128344545', 'Kota Bandung', 'bagas.jpg');


create table payment_methods (
	payment_methods_id serial,
	payment_methods_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_payment_methods primary key(payment_methods_id)
);

insert into payment_methods (payment_methods_name) values ('Cash'), ('Transfer');

create table status (
	status_id serial,
	status_name varchar(100) not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_status primary key(orders_status_id)
);

insert into status (orders_status_name) values ('Waiting'), ('Pending'), ('On Progress'), ('Done');

create table orders (
	orders_id serial,
	users_id int,
	customers_id int,
	payment_methods_id int not null,
	status_id int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_orders primary key(orders_id),
	constraint fk_orders_users foreign key (users_id) references users(users_id),
	constraint fk_orders_customers foreign key (customers_id) references customers(customers_id),
	constraint fk_orders_payment_methods foreign key (payment_methods_id) references payment_methods(payment_methods_id),
	constraint fk_orders_status foreign key (status_id) references status(status_id)
);

insert into orders (users_id, payment_methods_id, status_id)
values
(1, 2, 1), (2, 1, 1);

create table orders_products (
	orders_products_id serial,
	orders_id int not null,
	products_id int not null,
	created_at timestamp not null default NOW(),
	updated_at timestamp,
	constraint pk_orders_products primary key(orders_products_id),
	constraint fk_orders_products_orders foreign key (orders_id) references orders(orders_id),
	constraint fk_orders_products_products foreign key (products_id) references products(products_id)
);

insert into orders_products (orders_id, products_id) values (1, 1), (1, 3), (2, 2), (2, 4), (3, 3), (3, 6), (3, 5), (2, 7);

--crud di semua tabel

--crud categorys
select * from categorys;
insert into categorys (categorys_name) values ('Water');
update categorys set categorys_name = 'Coffee' where categorys_id = 1;
delete from categorys where categorys_id = 4;

--crud poromos
select * from promos;
insert into promos (promos_name) values ('FLASHSALE99');
update promos set promos_name = 'FLASHSALE' where promos_id = 1;
delete from promos where promos_id = 4;

--crud deliverys
select * from deliverys;
insert into deliverys (deliverys_name, deliverys_cost) values ('Pickup', 5000);
update deliverys set deliverys_name = 'Pickup Delivery' where deliverys_id = 3;
delete from deliverys where deliverys_id = 5;

--crud products
select * from products;
insert into products (products_name, products_price, products_desc, products_stock, products_image, categorys_id ,promos_id) 
values 
('Chocolate Milk', 42000, 'Chocolate milk is a chocolate milk', 140, 'chocolate-milk.jpg', 3, 2);
update products set products_name = 'Coffe Milk' where products_id = 3;
delete from products where products_id = 9;

--crud products_deliverys
select * from products_deliverys;
insert into products_deliverys (products_id, deliverys_id) values (7, 3);
update products_deliverys set deliverys_id = 2 where products_deliverys_id = 11;
delete from products_deliverys where products_deliverys_id = 11;

--crud sizes
select * from sizes;
insert into sizes (sizes_name) values ('600gr');
update sizes set sizes_name = '550gr' where sizes_id = 6;
delete from sizes where sizes_id = 6;

--crud products_sizes
select * from products_sizes;
insert into products_sizes (products_id, sizes_id) values (7, 4);
update products_sizes set sizes_id = 5 where products_sizes_id = 32;
delete from products_sizes where products_sizes_id = 32;

--crud roles
select * from roles;
insert into roles (roles_name) values ('Staff');
update roles set roles_name = 'Staff User' where roles_id = 3;
delete from roles where roles_id = 3;

--crud users
select * from users;
insert into users (users_name, users_email, users_password, users_phone, users_address, users_image, roles_id) 
values 
('Ronald Richards', 'cikaracak@gmail.com', '12345', '2095550100', '1901 Thornidge Cir. Shiloh Hawaii 81063', 'ronald.jpg', 2);
update users set roles_id = 1 where users_id = 3;
delete from users where users_id = 3;

--crud customers
select * from customers;
insert into customers (customers_name, customers_email, customers_password, customers_phone , customers_address , customers_image) 
values 
('Kristin Watson', 'cikaracak@gmail.com', '12345', '2525550126', '2972 Westheimer Rd. Santa Ana, Illinois 85486', 'watson.jpg');
update customers set customers_password = '54321' where customers_id = 2;
delete from customers where customers_id = 2;

--crud payment_methods
select * from payment_methods;
insert into payment_methods (payment_methods_name) values ('QRIS');
update payment_methods set payment_methods_name  = 'Debit' where payment_methods_id = 3;
delete from payment_methods where payment_methods_id = 3;

--crud status
select * from status;
insert into status (status_name) values ('On Delivery');
update status set status_name  = 'On Deliverys' where status_id = 5;
delete from status where status_id = 5;

--crud orders
select * from orders;
insert into orders (users_id, payment_methods_id, status_id) 
values (2, 2, 1);
update orders set status_id = 2 where orders_id = 6;
delete from orders where orders_id = 6;

--crud orders_products
select * from orders_products;
insert into orders_products (orders_id, products_id) values (1, 6);
update orders_products set products_id = 5 where orders_products_id = 18;
delete from orders_products where orders_products_id = 18;


--query products berdasarkan products_name
select * from products where products_name = 'Caramel Machiato';

--query products berdasarkan products_name, category, promo dan price
--dengan join

--products_name
select p.products_id, p.products_name, p.products_price, p.products_desc, p.products_stock, p.products_image, c.categorys_name, pr.promos_name 
from products p
join categorys c on p.categorys_id = c.categorys_id
join promos pr on p.promos_id = pr.promos_id
where p.products_name = 'Lemon Water';

--berdasarkan categorys_name
select p.products_id, p.products_name, p.products_price, p.products_desc, p.products_stock, p.products_image, c.categorys_name, pr.promos_name 
from products p
join categorys c on p.categorys_id = c.categorys_id
join promos pr on p.promos_id = pr.promos_id
where c.categorys_name = 'Coffee';

--berdasarkan promos
select p.products_id, p.products_name, p.products_price, p.products_desc, p.products_stock, p.products_image, c.categorys_name, pr.promos_name 
from products p
join categorys c on p.categorys_id = c.categorys_id
join promos pr on p.promos_id = pr.promos_id
where pr.promos_name = 'FLASHSALE';

--berdasarkan price
select p.products_id, p.products_name, p.products_price, p.products_desc, p.products_stock, p.products_image, c.categorys_name, pr.promos_name 
from products p
join categorys c on p.categorys_id = c.categorys_id
join promos pr on p.promos_id = pr.promos_id
where p.products_price  = 40000;


--menampilkan data hanya 3
--pageinput 1
--select * from products order by id asc limit 3 offset 6;
-- pagination
create or replace function pagination(page_input int) returns setof products as $$
	select * from products order by products_id asc limit 3 offset page_input * 3 - 3;
$$ language sql;

select pagination(1);

